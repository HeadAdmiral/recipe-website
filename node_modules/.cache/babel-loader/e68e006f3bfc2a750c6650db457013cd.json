{"remainingRequest":"C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\node_modules\\vuetify-loader\\lib\\loader.js!C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\src\\views\\Recipe.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\src\\views\\Recipe.vue","mtime":1545333081481},{"path":"C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1543030331000},{"path":"C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alex\\Documents\\GitHub\\recipe-website\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport database from '@/components/firebaseInit.js';\nimport VTabsSlider from \"vuetify/lib/components/VTabs/VTabsSlider\";\nexport default {\n  components: {\n    VTabsSlider: VTabsSlider\n  },\n  data: function data() {\n    var recipe = this.getRecipe();\n    return {\n      recipe: recipe,\n      rating: 0,\n      img: '',\n      active: null,\n      dialog: false,\n      shareDialog: false,\n      username: '',\n      comment: ''\n    };\n  },\n  methods: {\n    getRecipe: function getRecipe() {\n      var docs = []; // Query database for projects collection\n\n      database.collection('recipes').doc(this.$route.params.id).get().then(function (doc) {\n        if (doc.exists) {\n          docs.push(doc.data());\n        } else {\n          // doc.data() will be undefined in this case\n          console.log(\"No such document!\");\n        }\n      }).catch(function (error) {\n        console.log(\"Error getting document:\", error);\n      });\n      return docs;\n    },\n    setup: function setup(title, rating) {\n      this.rating = rating;\n\n      if (title !== \"\") {\n        title = title.replace(\" \", \"%20\");\n        return \"https://source.unsplash.com/1600x900/?\" + title;\n      }\n    },\n    updateRating: function updateRating(id, rating, count, score) {\n      // If the id is loaded update the recipe rating\n      if (id) {\n        count += 1;\n        score = score + rating;\n        rating = Number((score / count).toPrecision(3));\n        database.collection('recipes').doc(id).set({\n          rating: rating,\n          ratingCount: count,\n          ratingScore: score\n        }, {\n          merge: true\n        }).then(function () {\n          document.getElementById(\"rating\").innerText = '(' + rating + ')';\n          console.log('Rating successfully updated with values:');\n          console.log('Rating: ' + rating);\n          console.log('Rating Count: ' + count);\n          console.log('Rating Score: ' + score);\n        }).catch(function (error) {\n          console.error('Error adding document: ', error);\n          alert('An error has occurred while attempting to update the rating for document ' + id + '.');\n        });\n      }\n    },\n    setRating: function setRating(rating) {\n      this.rating = rating;\n    },\n    share: function share(id) {\n      return 'localhost:8080/recipe/' + id;\n    },\n    addComment: function addComment(recipe, username, comment) {\n      // Reset v-model\n      this.username = '';\n      this.comment = ''; // Default username should be Anonymous User if a username is not provided\n\n      if (username === '') {\n        username = 'Anonymous User';\n      }\n\n      var comments = []; // Add the new comment to an array\n\n      comments.push({\n        user: username,\n        comment: comment\n      }); // Add all existing comments into the array\n\n      for (var i = 0; i < recipe.comments.length; i++) {\n        comments.push({\n          user: recipe.comments[i].user,\n          comment: recipe.comments[i].comment\n        });\n      } // Update the database with the old comments concatenated with the new comment\n\n\n      database.collection('recipes').doc(this.$route.params.id).set({\n        comments: comments\n      }, {\n        merge: true\n      });\n    },\n    getColor: function getColor() {\n      var colors = ['red', 'pink', 'purple', 'indigo', 'deep-purple', 'blue', 'light-blue', 'cyan', 'teal', 'green', 'light-green', 'lime', 'yellow', 'amber', 'orange', 'deep-orange', 'brown', 'blue-grey', 'grey', 'black'];\n      var color = colors[Math.floor(Math.random() * colors.length)];\n      console.log(color);\n      return color;\n    }\n  }\n};",{"version":3,"sources":["Recipe.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <v-layout align-center justify-center column fill-height>\r\n        <v-flex my-3>\r\n            <v-card width=\"1250\" v-for=\"r in recipe\" :key=\"r.id\">\r\n                <v-img :src=\"setup(r.title, r.rating)\" aspect-ratio=\"2.75\"></v-img>\r\n                <v-tabs\r\n                        v-model=\"active\"\r\n                        color=\"teal\"\r\n                        dark\r\n                        slider-color=\"yellow\"\r\n                >\r\n                    <v-tab\r\n                            v-for=\"n in ['Summary', 'Ingredients', 'Directions']\"\r\n                            :key=\"n\"\r\n                            ripple\r\n                    >\r\n                        {{ n }}\r\n                    </v-tab>\r\n\r\n                    <v-tab-item\r\n                            v-for=\"n in [r.summary, r.ingredients, r.directions]\"\r\n                            :key=\"n\"\r\n                    >\r\n                        <v-card flat>\r\n                            <v-card-title primary-title v-if=\"n === r.summary\">\r\n                                <div>\r\n                                    <h3 class=\"headline mb-0\">{{ r.title }}</h3>\r\n                                </div>\r\n                            </v-card-title>\r\n                            <v-card-text>{{ n }}</v-card-text>\r\n                        </v-card>\r\n                    </v-tab-item>\r\n                </v-tabs>\r\n\r\n                <v-card-actions>\r\n                    <v-btn flat color='accent' @click='shareDialog = true'>Share</v-btn>\r\n                    <v-dialog\r\n                            v-model=\"shareDialog\"\r\n                            max-width=\"300\"\r\n                    >\r\n                        <v-card>\r\n                            <v-card-title class=\"headline\">\r\n                                Share Recipe\r\n                            </v-card-title>\r\n                            <v-card-text>\r\n                                Copy the link below to share with friends:\r\n                            </v-card-text>\r\n                            <v-layout align-center justify-center fill-height>\r\n                                <v-flex md11>\r\n                                    <v-text-field solo color=\"accent\" :value=\"share(r.id)\"></v-text-field>\r\n                                </v-flex>\r\n                            </v-layout>\r\n                            <v-divider></v-divider>\r\n                            <v-btn flat @click='shareDialog = false' color=\"accent\">Close</v-btn>\r\n                        </v-card>\r\n                    </v-dialog>\r\n                    <v-dialog v-model=\"dialog\" width=\"500\">\r\n                        <v-btn flat color='' slot=\"activator\">Comment</v-btn>\r\n                        <v-flex>\r\n                            <v-card>\r\n                                <v-card-title class=\"headline grey lighten-4\" primary-title>\r\n                                    Add a Comment\r\n                                </v-card-title>\r\n                                <v-card-text>\r\n                                    <v-text-field\r\n                                            v-model=\"username\"\r\n                                            label=\"Username\"\r\n                                            color=\"secondary\"\r\n                                            counter=\"20\"\r\n                                    ></v-text-field>\r\n                                    <v-text-field\r\n                                            v-model=\"comment\"\r\n                                            label=\"Comment\"\r\n                                            color=\"secondary\"\r\n                                            counter=\"140\"\r\n                                            required\r\n                                    ></v-text-field>\r\n                                </v-card-text>\r\n                                <v-divider></v-divider>\r\n                                <v-card-actions>\r\n                                    <v-spacer></v-spacer>\r\n                                    <v-btn color=\"accent\" flat @click=\"dialog = false, addComment(r, username, comment)\">\r\n                                        Submit\r\n                                    </v-btn>\r\n                                    <v-btn flat @click=\"dialog = false\">\r\n                                        Cancel\r\n                                    </v-btn>\r\n                                </v-card-actions>\r\n                            </v-card>\r\n                        </v-flex>\r\n                    </v-dialog>\r\n                    <v-spacer></v-spacer>\r\n                    <span class=\"grey--text text--darken-2 caption mr-2\" id=\"rating\">({{ rating }})</span>\r\n                    <div class=\"text-xs-center\">\r\n                        <v-rating\r\n                                v-model=\"rating\"\r\n                                color=\"yellow darken-3\"\r\n                                background-color=\"grey darken-1\"\r\n                                empty-icon=\"$vuetify.icons.ratingFull\"\r\n                                half-increments\r\n                                small\r\n                                hover\r\n                                :click=\"updateRating(r.id, rating, r.ratingCount, r.ratingScore)\"\r\n                                :created.once=\"setRating(r.rating)\"\r\n                        ></v-rating>\r\n                        <!-- Store ratings as ratingScore and totalRatings. Recipe rating = ratingScore / totalRatings -->\r\n                    </div>\r\n                </v-card-actions>\r\n                <v-divider></v-divider>\r\n                <v-expansion-panel>\r\n                    <v-expansion-panel-content>\r\n                        <div slot=\"header\">Comments</div>\r\n                        <v-divider></v-divider>\r\n\r\n                        <div v-for=\"comment in r.comments\">\r\n                            <v-layout align-center row spacer >\r\n                                <v-flex xs4 sm2 md1>\r\n                                    <v-avatar>\r\n                                        <v-icon class=\"ml-4\" size=\"40\" :color=\"getColor()\">account_circle</v-icon>\r\n                                    </v-avatar>\r\n                                </v-flex>\r\n\r\n                                <v-flex sm5 md3 hidden-xs-only>\r\n                                    <strong class=\"mr-5 ml-2\">{{ comment.user }}</strong>\r\n                                </v-flex>\r\n\r\n                                <v-flex>\r\n                                    <v-card-text>\r\n                                        {{ comment.comment }}\r\n                                    </v-card-text>\r\n                                </v-flex>\r\n                            </v-layout>\r\n                            <v-divider></v-divider>\r\n                        </div>\r\n                    </v-expansion-panel-content>\r\n                </v-expansion-panel>\r\n            </v-card>\r\n        </v-flex>\r\n    </v-layout>\r\n</template>\r\n\r\n<script>\r\n    import database from '@/components/firebaseInit.js'\r\n    import VTabsSlider from \"vuetify/lib/components/VTabs/VTabsSlider\";\r\n\r\n    export default {\r\n        components: {VTabsSlider},\r\n        data() {\r\n            let recipe = this.getRecipe();\r\n            return {\r\n                recipe,\r\n                rating: 0,\r\n                img: '',\r\n                active: null,\r\n                dialog: false,\r\n                shareDialog: false,\r\n                username: '',\r\n                comment: ''\r\n            }\r\n        },\r\n        methods: {\r\n            getRecipe() {\r\n                let docs = [];\r\n                // Query database for projects collection\r\n                database.collection('recipes').doc(this.$route.params.id).get().then(function (doc) {\r\n                    if (doc.exists) {\r\n                        docs.push(doc.data());\r\n                    } else {\r\n                        // doc.data() will be undefined in this case\r\n                        console.log(\"No such document!\");\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.log(\"Error getting document:\", error);\r\n                });\r\n                return docs;\r\n            },\r\n            setup(title, rating) {\r\n                this.rating = rating;\r\n\r\n                if (title !== \"\") {\r\n                    title = title.replace(\" \", \"%20\");\r\n                    return \"https://source.unsplash.com/1600x900/?\" + title;\r\n                }\r\n            },\r\n            updateRating(id, rating, count, score) {\r\n                // If the id is loaded update the recipe rating\r\n                if (id) {\r\n                    count += 1;\r\n                    score = score + rating;\r\n                    rating = Number((score / count).toPrecision(3));\r\n                    database.collection('recipes').doc(id).set({\r\n                        rating: rating,\r\n                        ratingCount: count,\r\n                        ratingScore: score\r\n                    }, {merge: true}).then(function () {\r\n                        document.getElementById(\"rating\").innerText = '(' + rating + ')';\r\n                        console.log('Rating successfully updated with values:');\r\n                        console.log('Rating: ' + rating);\r\n                        console.log('Rating Count: ' + count);\r\n                        console.log('Rating Score: ' + score);\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error('Error adding document: ', error);\r\n                            alert('An error has occurred while attempting to update the rating for document ' + id + '.')\r\n                        });\r\n                }\r\n            },\r\n            setRating(rating) {\r\n                this.rating = rating;\r\n            },\r\n            share(id) {\r\n                return 'localhost:8080/recipe/' + id;\r\n            },\r\n            addComment(recipe, username, comment) {\r\n                // Reset v-model\r\n                this.username = '';\r\n                this.comment = '';\r\n\r\n                // Default username should be Anonymous User if a username is not provided\r\n                if (username === '') {\r\n                    username = 'Anonymous User'\r\n                }\r\n\r\n                let comments = [];\r\n\r\n                // Add the new comment to an array\r\n                comments.push({\r\n                    user: username,\r\n                    comment: comment\r\n                });\r\n\r\n                // Add all existing comments into the array\r\n                for (let i = 0; i < recipe.comments.length; i++){\r\n                    comments.push({\r\n                        user: recipe.comments[i].user,\r\n                        comment: recipe.comments[i].comment\r\n                    })\r\n                }\r\n\r\n                // Update the database with the old comments concatenated with the new comment\r\n                database.collection('recipes').doc(this.$route.params.id).set({\r\n                    comments: comments\r\n                }, {merge: true})\r\n\r\n            },\r\n            getColor() {\r\n                let colors = ['red', 'pink', 'purple', 'indigo', 'deep-purple',\r\n                              'blue', 'light-blue', 'cyan', 'teal', 'green',\r\n                              'light-green', 'lime', 'yellow', 'amber', 'orange',\r\n                              'deep-orange', 'brown', 'blue-grey', 'grey', 'black'];\r\n                let color = colors[Math.floor(Math.random() * colors.length)];\r\n                console.log(color);\r\n                return color;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"sourceRoot":"src\\views"}]}